tasks:
- check code for performance improvement for multiple cpu cores
    - problem: multi thread not faster than single cpu, why?
        - continue: have test case where speed gain matches. Now slowly building up code to work with arbitrary test cases. 
            -Current active chunk split would crash normal game
    - idea: make test case where 2 citizens start at different locations which and make one thread do one side completly
        - compare single cpu to multi thread. So best case scenario two check what can be achieved. Maybe there is another bottleneck

    - differnt idea: assign chunk rectangle areas to threads

    - check how to idle threads, should not use 100% cpu time when idle,

    - update code for multi thread 
        - activeChunkKeys
        - citizenCounter: u32 = 0,
        - citizenCounterLastTick: u32 = 0,
        - citizensPerMinuteCounter: f32 = 0,            
    - vulkan data setup. Can it also be split to multiple cpus?



- bug: deleting can crash game
    - integer overflow, D:\mein\github_gamedev\Zig_ChatSim\src\citizen.zig:356:31: 0x7ff7f71f682c in buildingFinished (zig.exe.obj),  building.woodRequired -= 1;
- delete test simd branch?


- features:
    - performance            
        - check code for performance improvement for multiple cpu cores
        - performance of hashMap varies a lot. at some points goes below 30 fps and at other cpu is only at 17%
        - arena allocator (buggy)?
    - save game progress?
    - put on steam

  
Some data:
- FPS: 147, citizens: 33907, gameTime: 341472, end FPS: 91.29745 (16.05.2025)
- ~102_000 citizen my cpu can not keep 60fps anymore(while streamng + debug mode)

new test case: two areas far apart, stop test on 300_000 ingame time
- FPS: 133, citizens: 33932, gameTime: 300000, end FPS: 88.795555 (single cpu)
- FPS: 187, citizens: 33891, gameTime: 300000, end FPS: 141.98601 (multi thread)
- FPS: 184, citizens: 33894, gameTime: 300000, end FPS: 135.90143  (idle time:  402007)
    - idle time fps loss: 7
- FPS: 166, citizens: 33885, gameTime: 300000, end FPS: 127.27491 (main thread waits)    
- FPS: 126, citizens: 33937, gameTime: 300000, end FPS: 92.18444 (other threads waits)
- FPS: 140, citizens: 33917, gameTime: 300000, end FPS: 103.089615 (VALIDATION_CHUNK_DISTANCE = 5)
- FPS: 155, citizens: 33885, gameTime: 300000, end FPS: 115.60401  (VALIDATION_CHUNK_DISTANCE = 20)
- FPS: 158, citizens: 33965, gameTime: 300000, end FPS: 119.683014 (VALIDATION_CHUNK_DISTANCE = 30)
- FPS: 161, citizens: 33915, gameTime: 300000, end FPS: 121.9074   (VALIDATION_CHUNK_DISTANCE = 40)
- FPS: 170, citizens: 33943, gameTime: 300000, end FPS: 130.28503  (VALIDATION_CHUNK_DISTANCE = 50)
- FPS: 179, citizens: 33879, gameTime: 300000, end FPS: 135.15602  (VALIDATION_CHUNK_DISTANCE = 60) 
- FPS: 178, citizens: 33932, gameTime: 300000, end FPS: 134.18103  (VALIDATION_CHUNK_DISTANCE = 100)

- (10*10) rectangle 
    - keep distance 10x10

- 20x20 = 400

- FPS: 164, citizens: 33963, gameTime: 300000, end FPS: 122.46056  (VALIDATION_CHUNK_DISTANCE = 20, main thread now also considers it)
- FPS: 139, citizens: 33909, gameTime: 300000, end FPS: 102.88702 (VALIDATION_CHUNK_DISTANCE = 5)

80% of totlal frame is ticking. best case two threads with 40%. 100% - 40% => 60%. time per frame reduced by 40% => fps increase by fps/0.6 => 88 / 0.6 => 147 fps
1000 / 136 => 7.4 milliSeconds per tick. i lose ~0.4 milli seconds per tick  5.4% => 

Goal:
- a game which should not take more than 6month to make. Maybe publish to steam.
- performance should matter
- game idea:
    - city builder extreme fast
    - i have citizens. Each citizen just needs a home and food
        - citizens can be chatters
    - i as the player can:
        - place building orders: 
            - houses for citizens to live in
            - tree farm: citizens can become lumberjacks to gather wood and cut it. Required for building houses
            - farm: citizens can become farmers to plant food. Required for not starving
            - citizens must build these and gather resources for it
            - storage area. Used for storing food and wood
            - upgrade building:
                - bigger house: more people can live in it
    - citizens will automatically join if houses with space exit
    - game start with one small house and one citizen (the player) and storage area with some food and wood
    - game loop:
        - build more houses -> get more citizens
        - more citizen need more food -> build more or bigger farms
        - more citizens -> can build more faster
        - scale town up to what the PC can handle
            -> code performance matters
            -> expectations with my pc: 10_000 citizens and 60fp should be easy
                -> expectations which i guess should be possible: 100_000 citizens and 60fps

